/*
 * Copyright (c) 2019, Systems Group, ETH Zurich
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
`timescale 1ns / 1ps
`default_nettype none

module role_wrapper #(
    parameter NUM_ROLE_DDR_CHANNELS = 0
) (
    input wire      net_clk,
    input wire      net_aresetn,
    input wire      pcie_clk,
    input wire      pcie_aresetn,
    
    input wire      user_clk,
    input wire      user_aresetn,


    /* CONTROL INTERFACE */
    axi_lite.slave      s_axil,

    /* NETWORK  - TCP/IP INTERFACE */
    // open port for listening
    axis_meta.master    m_axis_listen_port,
    axis_meta.slave     s_axis_listen_port_status,
   
    axis_meta.master    m_axis_open_connection,
    axis_meta.slave     s_axis_open_status,
    axis_meta.master    m_axis_close_connection,

    axis_meta.slave     s_axis_notifications,
    
    axis_meta.slave     s_rxsar_rxapp_upd_rsp,
    axis_meta.master    m_rxapp_rxsar_upd_req,
    axis_meta.master    m_rxappstreamif_memaccessbreakdown,
    axi_stream.slave    s_axis_rx_data,
    
    axis_meta.master    m_axis_tx_metadata,
    axi_stream.master   m_axis_tx_data, //output
    axis_meta.slave     s_axis_tx_status,
    
    /* NETWORK - UDP/IP INTERFACE */
    axis_meta.slave     s_axis_udp_rx_metadata,
    axi_stream.slave    s_axis_udp_rx_data,
    axis_meta.master    m_axis_udp_tx_metadata,
    axi_stream.master   m_axis_udp_tx_data,

    /* NETWORK - RDMA INTERFACE */
    axis_meta.slave             s_axis_roce_rx_read_cmd,
    axis_meta.slave             s_axis_roce_rx_write_cmd,
    axi_stream.slave            s_axis_roce_rx_write_data,
    axis_meta.master            m_axis_roce_tx_meta,
    axi_stream.master           m_axis_roce_tx_data,

    /* MEMORY INTERFACE */
    // read command
    axis_mem_cmd.master     m_axis_mem_read_cmd[NUM_DDR_CHANNELS],
    // read status
    axis_mem_status.slave   s_axis_mem_read_status[NUM_DDR_CHANNELS],
    // read data stream
    axi_stream.slave        s_axis_mem_read_data[NUM_DDR_CHANNELS],
    
    // write command
    axis_mem_cmd.master     m_axis_mem_write_cmd[NUM_DDR_CHANNELS],
    // write status
    axis_mem_status.slave   s_axis_mem_write_status[NUM_DDR_CHANNELS],
    // write data stream
    axi_stream.master       m_axis_mem_write_data[NUM_DDR_CHANNELS],
    
    /* DMA INTERFACE */
    axis_mem_cmd.master     m_axis_dma_read_cmd,
    axis_mem_cmd.master     m_axis_dma_write_cmd,

    axi_stream.slave        s_axis_dma_read_data,
    axi_stream.master       m_axis_dma_write_data

);

logic           user_clk_mmcm_out;
logic           mmcm_rst;
logic           mmcm_locked;
logic           mmcm_clkfb;

// @yang, you should use clocking Wizard to get the number. 
// MMCM instance
// 322.26 MHz in, 161.13 MHz out
// PFD range: 10 MHz to 500 MHz
// VCO range: 800 MHz to 1600 MHz
// M = 3.75, D = 1 sets Fvco = 1208.475 MHz (in range)
// Divide by 7.5 to get output frequency of 161.13 MHz
// MMCME4_BASE #(
//     .BANDWIDTH("OPTIMIZED"),
//     // .CLKOUT0_DIVIDE_F(7.5),
//     .CLKOUT0_DIVIDE_F(3.750),
//     .CLKOUT0_DUTY_CYCLE(0.5),
//     .CLKOUT0_PHASE(0),
//     .CLKOUT1_DIVIDE(1),
//     .CLKOUT1_DUTY_CYCLE(0.5),
//     .CLKOUT1_PHASE(0),
//     .CLKOUT2_DIVIDE(1),
//     .CLKOUT2_DUTY_CYCLE(0.5),
//     .CLKOUT2_PHASE(0),
//     .CLKOUT3_DIVIDE(1),
//     .CLKOUT3_DUTY_CYCLE(0.5),
//     .CLKOUT3_PHASE(0),
//     .CLKOUT4_DIVIDE(1),
//     .CLKOUT4_DUTY_CYCLE(0.5),
//     .CLKOUT4_PHASE(0),
//     .CLKOUT5_DIVIDE(1),
//     .CLKOUT5_DUTY_CYCLE(0.5),
//     .CLKOUT5_PHASE(0),
//     .CLKOUT6_DIVIDE(1),
//     .CLKOUT6_DUTY_CYCLE(0.5),
//     .CLKOUT6_PHASE(0),
//     .CLKFBOUT_MULT_F(3.750),
//     .CLKFBOUT_PHASE(0),
//     .DIVCLK_DIVIDE(1),
//     .REF_JITTER1(0.010),
//     .CLKIN1_PERIOD(3.103),
//     .STARTUP_WAIT("FALSE"),
//     .CLKOUT4_CASCADE("FALSE")
// )
// clk_mmcm_inst (
//     .CLKIN1(${ROLE_CLK}_clk),
//     .CLKFBIN(mmcm_clkfb),
//     .RST(mmcm_rst),
//     .PWRDWN(1'b0),
//     .CLKOUT0(user_clk_mmcm_out),
//     .CLKOUT0B(),
//     .CLKOUT1(),
//     .CLKOUT1B(),
//     .CLKOUT2(),
//     .CLKOUT2B(),
//     .CLKOUT3(),
//     .CLKOUT3B(),
//     .CLKOUT4(),
//     .CLKOUT5(),
//     .CLKOUT6(),
//     .CLKFBOUT(mmcm_clkfb),
//     .CLKFBOUTB(),
//     .LOCKED(mmcm_locked)
// );

// BUFG
// clk_161mhz_bufg_inst (
//     .I(user_clk_mmcm_out),
//     .O(user_clk)
// );

logic[31:0] clk_cnt;
// @yang, this might causes things not working??
always @( posedge user_clk ) begin
    // user_aresetn <= ${ROLE_CLK}_aresetn;
    clk_cnt <= clk_cnt + 1;
end

//Chose user clock
// assign user_clk = ${ROLE_CLK}_clk;
// assign user_aresetn = ${ROLE_CLK}_aresetn;


axis_mem_cmd    axis_dma_read_cmd();
axis_mem_cmd    axis_dma_write_cmd();
axi_stream      axis_dma_read_data();
axi_stream      axis_dma_write_data();


axis_meta #(.WIDTH(16))      axis_tcp_listen_port();
axis_meta #(.WIDTH(8))       axis_tcp_listen_port_status();
axis_meta #(.WIDTH(48))      axis_tcp_open_connection();
axis_meta #(.WIDTH(24))      axis_tcp_open_status();
axis_meta #(.WIDTH(16))      axis_tcp_close_connection();
axis_meta #(.WIDTH(88))      axis_tcp_notifications();
axis_meta #(.WIDTH(40))     axis_rxsar_rxapp_upd_rsp();
axis_meta #(.WIDTH(40))     axis_rxapp_rxsar_upd_req();
axis_meta #(.WIDTH(72))     axis_rxappstreamif_memaccessbreakdown();
axi_stream #(.WIDTH(NETWORK_STACK_WIDTH))    axis_tcp_rx_data();
axis_meta #(.WIDTH(32))      axis_tcp_tx_metadata();
axi_stream #(.WIDTH(NETWORK_STACK_WIDTH))    axis_tcp_tx_data();
axis_meta #(.WIDTH(64))      axis_tcp_tx_status();

${ROLE_NAME} #(
    .NUM_ROLE_DDR_CHANNELS(NUM_DDR_CHANNELS - NUM_TCP_CHANNELS)
) user_role (
    .user_clk(user_clk),
    .user_aresetn(user_aresetn),
    .pcie_clk(pcie_clk),
    .pcie_aresetn(pcie_aresetn),

    /* CONTROL INTERFACE */
    // LITE interface
    .s_axil         (s_axil),

    /* NETWORK - TCP/IP INTERFACWE */
    .m_axis_listen_port(axis_tcp_listen_port),
    .s_axis_listen_port_status(axis_tcp_listen_port_status),
    .m_axis_open_connection(axis_tcp_open_connection),
    .s_axis_open_status(axis_tcp_open_status),
    .m_axis_close_connection(axis_tcp_close_connection),
    .s_axis_notifications(axis_tcp_notifications),
    
    .s_rxsar_rxapp_upd_rsp(axis_rxsar_rxapp_upd_rsp),
    .m_rxapp_rxsar_upd_req(axis_rxapp_rxsar_upd_req),
    .m_rxappstreamif_memaccessbreakdown(axis_rxappstreamif_memaccessbreakdown),
    .s_axis_rx_data(axis_tcp_rx_data),
    .m_axis_tx_metadata(axis_tcp_tx_metadata),
    .m_axis_tx_data(axis_tcp_tx_data), //output wire
    .s_axis_tx_status(axis_tcp_tx_status),
    
    /* NETWORK - UDP/IP INTERFACE */
    .s_axis_udp_rx_metadata(s_axis_udp_rx_metadata),
    .s_axis_udp_rx_data(s_axis_udp_rx_data),
    .m_axis_udp_tx_metadata(m_axis_udp_tx_metadata),
    .m_axis_udp_tx_data(m_axis_udp_tx_data),

    /* NETWORK - RDMA INTERFACWE */
    .s_axis_roce_rx_read_cmd(s_axis_roce_rx_read_cmd),
    .s_axis_roce_rx_write_cmd(s_axis_roce_rx_write_cmd),
    .s_axis_roce_rx_write_data(s_axis_roce_rx_write_data),
    .m_axis_roce_tx_meta(m_axis_roce_tx_meta),
    .m_axis_roce_tx_data(m_axis_roce_tx_data),


    /* MEMORY INTERFACE */
    .m_axis_mem_read_cmd(m_axis_mem_read_cmd),
    .m_axis_mem_write_cmd(m_axis_mem_write_cmd),
    .s_axis_mem_read_data(s_axis_mem_read_data),
    .m_axis_mem_write_data(m_axis_mem_write_data),
    .s_axis_mem_read_status(s_axis_mem_read_status),
    .s_axis_mem_write_status(s_axis_mem_write_status),

    /* DMA INTERFACE */
    .m_axis_dma_read_cmd    (axis_dma_read_cmd),
    .m_axis_dma_write_cmd   (axis_dma_write_cmd),

    .s_axis_dma_read_data   (axis_dma_read_data),
    .m_axis_dma_write_data  (axis_dma_write_data)

);

logic[31:0] rx_wr_buffer_data_count;
logic[31:0] rx_rd_buffer_data_count;
logic[31:0] tx_wr_buffer_data_count;
logic[31:0] tx_rd_buffer_data_count;

 /*
  * Crossing clock Command (with back pressure)
  */
axis_data_fifo_512_cc_cnt tcp_tx_data_inst (
  .s_axis_aresetn(user_aresetn),
  .s_axis_aclk(user_clk),
  .s_axis_tvalid(axis_tcp_tx_data.valid),
  .s_axis_tready(axis_tcp_tx_data.ready),
  .s_axis_tdata(axis_tcp_tx_data.data),// input wires
  .s_axis_tkeep(axis_tcp_tx_data.keep),
  .s_axis_tlast(axis_tcp_tx_data.last),
  
  .m_axis_aclk(${ROLE_CLK}_clk),
  .m_axis_tvalid(m_axis_tx_data.valid),
  .m_axis_tready(m_axis_tx_data.ready),
  .m_axis_tdata(m_axis_tx_data.data),//output wires
  .m_axis_tkeep(m_axis_tx_data.keep),
  .m_axis_tlast(m_axis_tx_data.last), 
  
  .axis_wr_data_count(tx_wr_buffer_data_count),
  .axis_rd_data_count(tx_rd_buffer_data_count)
);
axis_data_fifo_16_cc_cnt tcp_listen_port_inst (
  .s_axis_aresetn(user_aresetn),
  .s_axis_aclk(user_clk),
  .s_axis_tvalid(axis_tcp_listen_port.valid),
  .s_axis_tready(axis_tcp_listen_port.ready),
  .s_axis_tdata(axis_tcp_listen_port.data),
  
  .m_axis_aclk(${ROLE_CLK}_clk),
  .m_axis_tvalid(m_axis_listen_port.valid),
  .m_axis_tready(m_axis_listen_port.ready),
  .m_axis_tdata(m_axis_listen_port.data), 
  
  .axis_wr_data_count(),
  .axis_rd_data_count()
);
axis_data_fifo_48_cc_cnt tcp_open_connection_inst (
  .s_axis_aresetn(user_aresetn),
  .s_axis_aclk(user_clk),
  .s_axis_tvalid(axis_tcp_open_connection.valid),
  .s_axis_tready(axis_tcp_open_connection.ready),
  .s_axis_tdata(axis_tcp_open_connection.data),
  
  .m_axis_aclk(${ROLE_CLK}_clk),
  .m_axis_tvalid(m_axis_open_connection.valid),
  .m_axis_tready(m_axis_open_connection.ready),
  .m_axis_tdata(m_axis_open_connection.data), 
  
  .axis_wr_data_count(),
  .axis_rd_data_count()
);
axis_data_fifo_16_cc_cnt tcp_close_connection_inst (
  .s_axis_aresetn(user_aresetn),
  .s_axis_aclk(user_clk),
  .s_axis_tvalid(axis_tcp_close_connection.valid),
  .s_axis_tready(axis_tcp_close_connection.ready),
  .s_axis_tdata(axis_tcp_close_connection.data),
  
  .m_axis_aclk(${ROLE_CLK}_clk),
  .m_axis_tvalid(m_axis_close_connection.valid),
  .m_axis_tready(m_axis_close_connection.ready),
  .m_axis_tdata(m_axis_close_connection.data), 
  
  .axis_wr_data_count(),
  .axis_rd_data_count()
);
axis_data_fifo_32_cc_cnt tcp_tx_metadata_inst (
  .s_axis_aresetn(user_aresetn),
  .s_axis_aclk(user_clk),
  .s_axis_tvalid(axis_tcp_tx_metadata.valid),
  .s_axis_tready(axis_tcp_tx_metadata.ready),
  .s_axis_tdata(axis_tcp_tx_metadata.data),
  
  .m_axis_aclk(${ROLE_CLK}_clk),
  .m_axis_tvalid(m_axis_tx_metadata.valid),
  .m_axis_tready(m_axis_tx_metadata.ready),
  .m_axis_tdata(m_axis_tx_metadata.data), 
  
  .axis_wr_data_count(),
  .axis_rd_data_count()
);
axis_data_fifo_40_cc_cnt rxapp_rxsar_upd_req_inst (
  .s_axis_aresetn(user_aresetn),
  .s_axis_aclk(user_clk),
  .s_axis_tvalid(axis_rxapp_rxsar_upd_req.valid),
  .s_axis_tready(axis_rxapp_rxsar_upd_req.ready),
  .s_axis_tdata(axis_rxapp_rxsar_upd_req.data),
  
  .m_axis_aclk(${ROLE_CLK}_clk),
  .m_axis_tvalid(m_rxapp_rxsar_upd_req.valid),
  .m_axis_tready(m_rxapp_rxsar_upd_req.ready),
  .m_axis_tdata(m_rxapp_rxsar_upd_req.data), 
  
  .axis_wr_data_count(),
  .axis_rd_data_count()
);
axis_data_fifo_72_cc_cnt rxappstreamif_memaccessbreakdown_inst (
  .s_axis_aresetn(user_aresetn),
  .s_axis_aclk(user_clk),
  .s_axis_tvalid(axis_rxappstreamif_memaccessbreakdown.valid),
  .s_axis_tready(axis_rxappstreamif_memaccessbreakdown.ready),
  .s_axis_tdata(axis_rxappstreamif_memaccessbreakdown.data),
  
  .m_axis_aclk(${ROLE_CLK}_clk),
  .m_axis_tvalid(m_rxappstreamif_memaccessbreakdown.valid),
  .m_axis_tready(m_rxappstreamif_memaccessbreakdown.ready),
  .m_axis_tdata(m_rxappstreamif_memaccessbreakdown.data), 
  
  .axis_wr_data_count(),
  .axis_rd_data_count()
);


axis_data_fifo_512_cc_cnt tcp_rx_data_inst (
  .s_axis_aresetn(${ROLE_CLK}_aresetn),
  .s_axis_aclk(${ROLE_CLK}_clk),
  .s_axis_tvalid(s_axis_rx_data.valid),
  .s_axis_tready(s_axis_rx_data.ready),
  .s_axis_tdata(s_axis_rx_data.data),
  .s_axis_tkeep(s_axis_rx_data.keep),
  .s_axis_tlast(s_axis_rx_data.last),
  
  .m_axis_aclk(user_clk),
  .m_axis_tvalid(axis_tcp_rx_data.valid),
  .m_axis_tready(axis_tcp_rx_data.ready),
  .m_axis_tdata(axis_tcp_rx_data.data),
  .m_axis_tkeep(axis_tcp_rx_data.keep),
  .m_axis_tlast(axis_tcp_rx_data.last), 
  
  .axis_wr_data_count(rx_wr_buffer_data_count),
  .axis_rd_data_count(rx_rd_buffer_data_count)
);
axis_data_fifo_8_cc_cnt tcp_listen_port_status_inst (
  .s_axis_aresetn(${ROLE_CLK}_aresetn),
  .s_axis_aclk(${ROLE_CLK}_clk),
  .s_axis_tvalid(s_axis_listen_port_status.valid),
  .s_axis_tready(s_axis_listen_port_status.ready),
  .s_axis_tdata(s_axis_listen_port_status.data),
  
  .m_axis_aclk(user_clk),
  .m_axis_tvalid(axis_tcp_listen_port_status.valid),
  .m_axis_tready(axis_tcp_listen_port_status.ready),
  .m_axis_tdata(axis_tcp_listen_port_status.data), 
  
  .axis_wr_data_count(),
  .axis_rd_data_count()
);
axis_data_fifo_24_cc_cnt tcp_open_status_inst (
  .s_axis_aresetn(${ROLE_CLK}_aresetn),
  .s_axis_aclk(${ROLE_CLK}_clk),
  .s_axis_tvalid(s_axis_open_status.valid),
  .s_axis_tready(s_axis_open_status.ready),
  .s_axis_tdata(s_axis_open_status.data),
  
  .m_axis_aclk(user_clk),
  .m_axis_tvalid(axis_tcp_open_status.valid),
  .m_axis_tready(axis_tcp_open_status.ready),
  .m_axis_tdata(axis_tcp_open_status.data), 
  
  .axis_wr_data_count(),
  .axis_rd_data_count()
);
axis_data_fifo_40_cc_cnt rxsar_rxapp_upd_rsp_inst (
  .s_axis_aresetn(${ROLE_CLK}_aresetn),
  .s_axis_aclk(${ROLE_CLK}_clk),
  .s_axis_tvalid(s_rxsar_rxapp_upd_rsp.valid),
  .s_axis_tready(s_rxsar_rxapp_upd_rsp.ready),
  .s_axis_tdata(s_rxsar_rxapp_upd_rsp.data),
  
  .m_axis_aclk(user_clk),
  .m_axis_tvalid(axis_rxsar_rxapp_upd_rsp.valid),
  .m_axis_tready(axis_rxsar_rxapp_upd_rsp.ready),
  .m_axis_tdata(axis_rxsar_rxapp_upd_rsp.data), 
  
  .axis_wr_data_count(),
  .axis_rd_data_count()
);
axis_data_fifo_88_cc_cnt tcp_notifications_inst (
  .s_axis_aresetn(${ROLE_CLK}_aresetn),
  .s_axis_aclk(${ROLE_CLK}_clk),
  .s_axis_tvalid(s_axis_notifications.valid),
  .s_axis_tready(s_axis_notifications.ready),
  .s_axis_tdata(s_axis_notifications.data),
  
  .m_axis_aclk(user_clk),
  .m_axis_tvalid(axis_tcp_notifications.valid),
  .m_axis_tready(axis_tcp_notifications.ready),
  .m_axis_tdata(axis_tcp_notifications.data), 
  
  .axis_wr_data_count(),
  .axis_rd_data_count()
);
axis_data_fifo_64_cc_cnt tcp_tx_status_inst (
  .s_axis_aresetn(${ROLE_CLK}_aresetn),
  .s_axis_aclk(${ROLE_CLK}_clk),
  .s_axis_tvalid(s_axis_tx_status.valid),
  .s_axis_tready(s_axis_tx_status.ready),
  .s_axis_tdata(s_axis_tx_status.data),
  
  .m_axis_aclk(user_clk),
  .m_axis_tvalid(axis_tcp_tx_status.valid),
  .m_axis_tready(axis_tcp_tx_status.ready),
  .m_axis_tdata(axis_tcp_tx_status.data), 
  
  .axis_wr_data_count(),
  .axis_rd_data_count()
);


ila_mixed3 benchmark_debug2 (
    .clk(user_clk),
    .probe0(rx_wr_buffer_data_count),
    .probe1(rx_rd_buffer_data_count),
    .probe2(tx_wr_buffer_data_count),
    .probe3(tx_rd_buffer_data_count),
    .probe4({31'h0, user_clk}),
    .probe5({31'h0, user_aresetn}),
    .probe6(clk_cnt),
    .probe7(32'h0),
    .probe8(32'h0),
    .probe9(32'h0),
    .probe10(32'h0),
    .probe11(32'h0),
    .probe12(32'h0),
    .probe13(32'h0),
    .probe14(32'h0),
    .probe15(32'h0)
);

//Axi slice registers, due to HLS 19.1
axis_register_slice_96 dma_read_cmd_slice (
  .aclk(user_clk),
  .aresetn(user_aresetn),
  .s_axis_tvalid(axis_dma_read_cmd.valid),
  .s_axis_tready(axis_dma_read_cmd.ready),
  .s_axis_tdata({axis_dma_read_cmd.length, axis_dma_read_cmd.address}),
  .m_axis_tvalid(m_axis_dma_read_cmd.valid),
  .m_axis_tready(m_axis_dma_read_cmd.ready),
  .m_axis_tdata({m_axis_dma_read_cmd.length, m_axis_dma_read_cmd.address})
);

axis_register_slice_96 dma_write_cmd_slice (
  .aclk(user_clk),
  .aresetn(user_aresetn),
  .s_axis_tvalid(axis_dma_write_cmd.valid),
  .s_axis_tready(axis_dma_write_cmd.ready),
  .s_axis_tdata({axis_dma_write_cmd.length, axis_dma_write_cmd.address}),
  .m_axis_tvalid(m_axis_dma_write_cmd.valid),
  .m_axis_tready(m_axis_dma_write_cmd.ready),
  .m_axis_tdata({m_axis_dma_write_cmd.length, m_axis_dma_write_cmd.address})
);

axis_register_slice_512 dma_read_data_slice (
  .aclk(user_clk),
  .aresetn(user_aresetn),
  .s_axis_tvalid(s_axis_dma_read_data.valid),
  .s_axis_tready(s_axis_dma_read_data.ready),
  .s_axis_tdata(s_axis_dma_read_data.data),
  .s_axis_tkeep(s_axis_dma_read_data.keep),
  .s_axis_tlast(s_axis_dma_read_data.last),
  .m_axis_tvalid(axis_dma_read_data.valid),
  .m_axis_tready(axis_dma_read_data.ready),
  .m_axis_tdata(axis_dma_read_data.data),
  .m_axis_tkeep(axis_dma_read_data.keep),
  .m_axis_tlast(axis_dma_read_data.last)
);

axis_register_slice_512 dma_write_data_slice (
  .aclk(user_clk),
  .aresetn(user_aresetn),
  .s_axis_tvalid(axis_dma_write_data.valid),
  .s_axis_tready(axis_dma_write_data.ready),
  .s_axis_tdata(axis_dma_write_data.data),
  .s_axis_tkeep(axis_dma_write_data.keep),
  .s_axis_tlast(axis_dma_write_data.last),
  .m_axis_tvalid(m_axis_dma_write_data.valid),
  .m_axis_tready(m_axis_dma_write_data.ready),
  .m_axis_tdata(m_axis_dma_write_data.data),
  .m_axis_tkeep(m_axis_dma_write_data.keep),
  .m_axis_tlast(m_axis_dma_write_data.last)
);

endmodule
`default_nettype wire
